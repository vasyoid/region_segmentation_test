1. Thresholding, Otsu's method (https://en.wikipedia.org/wiki/Otsu%27s_method)
  Плюсы:
    -Простота вычислений и высокая скорость работы.
    -Точный результат на изображениях, где цвета фона и объекта достаточно сильно различаются.
  Минусы:
    -Грубый результат на изображениях с нечеткими границами объекта.
    -Используются только значения цветов пикселей, что ведет к появлению изолированных областей и шумов.

2. Region growth (https://en.wikipedia.org/wiki/Region_growing)
  Плюсы:
    -Количество изолированных областей сегментации не превосходит количества областей пользовательского ввода.
  Минусы:
    -Низкая скорость работы
    -Если объект состоит из нескольких контрастных областей, пользователю необходимо выделять все такие области, чтобы они включились в результат.
    -Если граница объекта в целом четкая, но на небольшом участке сливается с фоном, прилегающая область фона может классифицироваться как объект и наоборот.

3. Edge detection (https://en.wikipedia.org/wiki/Edge_detection)
  Плюсы:
    -Хороший результат на изображениях с четкими границами объекта, даже в случае, когда цвета фона и объекта различаются несильно.
  Минусы:
    -Если текстура объекта неоднородная, находится много границ, пользователю необходимо выделять большое количество пикселей, чтобы включить все замкнутые области.

4. Graph cuts (http://www.csd.uwo.ca/~yuri/Papers/iccv01.pdf)
  Плюсы:
    -Поскольку учитываются и локальные (похожесть на соседей), и глобальные (похожесть на пиксели, выделенные пользователем) свойства пикселей, границы, где фон и объект отличаются не сильно, обрабатываются лучше, чем в предыдущих алгоритмах.
  Минусы:
    -Внутренние области объекта, похожие на фон, могут классифицироваться как фон и наоборот.
    -В результате получается несколько изолированных областей, что нехорошо в контексте решаемой задачи.

5. Graph cuts, терминальные вершины соединены только с выделенными пользователем вершинами.
  Плюсы:
    -Одна связная область.
    -Лучше работает на объектах с похожими на дон областями.
  Минусы:
    -Так как веса ребер неотрицательные, разрез иногда выгоднее провести по меньшему числу ребер большого веса, чем по большему числу маленького. Это ведет к сильному спрямлению границы и исключению больших областей объекта или включению областей фона.
  Решения:
    -Задавать ребрам экспоненциальные веса.
    -Использовать значения градиента интенсивности пикселей и сильно увеличивать веса ребер в точках локального максимума.

6. Normalized cuts (https://en.wikipedia.org/wiki/Segmentation-based_object_categorization#Normalized_cuts)
  Плюсы:
    -Подход нормализует величину разреза и позволяет избежать проблем предыдущего алгоритмы
  Минусы:
    -Поскольку задача поиска нормализованного разреза NP-трудна, все её известные решения либо медленные, либо неточные.

7. GrabCut (https://cvg.ethz.ch/teaching/cvl/2012/grabcut-siggraph04.pdf)
  Плюсы:
    -Использование RGB-значений вместо интенсивности лучше работает на цветных изображениях.
    -Итеративный метод минимизации энергетической функции на каждом следующем шаге использует информацию о пикселях, классифицированных на предыдущих шагах. Это должно увеличить качество результата по сравнению с обычным graph cut методом.
    -В результате пользовательское взаимодействие можно сильно уменьшить без потери результата.
  Минусы:
    -Метод итераций требует несколько раз вызывать алгоритм поиска разреза, что может сильно увеличить время работы на больших изображениях.